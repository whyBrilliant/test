1--save-dev（-D） 开发时候依赖的东西，放在package.json的devDependencies模块，--save(-D) 发布之后还依赖的东西，放在dependencies模块。
比如，你写 ES6 代码，如果你想编译成 ES5 发布那么 babel 就是devDependencies。
如果你用了jQuery，由于发布之后还是依赖jQuery，所以是dependencies。但是在 npm 里面除了二进制的依赖，似乎也不用区分是不是dev。

2.loader让webpack 能够去处理那些非JavaScript 文件，可以将所有类型的文件转换为 webpack 能够处理的有效模块

4.webpack 插件是一个具有 apply 属性的 JavaScript 对象。apply 属性会被 webpack compiler 调用，并且 compiler 对象可在整个编译生命周期访问

5.插件
HtmlWebpackPlugin:自动生成一个HTML文件，并引用相关的assets文件。每次会自动把js插入到你的模板index.html里面去。
webpack.optimize.UglifyJsPlugin()：压缩插件，优化缩小js包体积。
webpack.optimize.CommonsChunkPlugin()：提取公共代码块。webpack的资源入口通常是以entry为单元进行编译提取，那么当多entry共存的时候，它可以对所有依赖的chunk以module为单位进行公共部分的提取。可以向其内部输入参数来设置提取所有入口的公共部分，也可以提取部分公共部分。可以实现：
①多入口，模块重复引用，分文件输出（将多次引用的模块打包到公共模块）
②将公共业务模块与类库或框架分开打包；
https://segmentfault.com/a/1190000006808865(commonschunkplugin使用)

6.resolve
设置模块如何被解析，其常用属性有：
Alias：创建 import 或 require 的别名，来确保模块引入变得更简单
extension：自动解析扩展，能够使用户在引入模块时不带扩展，默认有[‘.js’,’.json’]。
plugins：应该使用的额外的解析插件列表

Alias: webpack提供了一个别名配置，就是我们无论在哪个路径下，引用都可以这样 import Home from 'pages/Home/Home';
resolve: {
        alias: {
            component: path.join(__dirname, 'src/component'),
        }
    }

7.devServer
webpack-dev-server就是一个小型的静态文件服务器。使用它，可以为webpack打包生成的资源文件提供Web服务。这里webpack-dev-server需要全局安装，要不后面用的时候要写相对路径。
webpack-dev-server编译后的文件，都存储在内存中

devServer: {
    contentBase: './src/',
    historyApiFallback: true,
    hot: true,
    port: defaultSettings.port,
    publicPath: defaultSettings.publicPath,
    noInfo: false
  }

contentBase：URL的根目录。如果不设定的话，默认指向项目根目录。
historyApiFallback：当使用 HTML5 History API 时，任意的 404 响应都可能需要被替代为 index.html，则其值为true。通过传入一个对象，比如使用 rewrites 这个选项，此行为可进一步地控制。
hot：启用 webpack 的模块热替换特性
port:指定要监听请求的端口号，默认端口号是8080
publicPath：此路径下的打包文件可在浏览器中访问
noInfo：当为true时，启用 noInfo 后，诸如「启动时和每次保存之后，那些显示的 webpack 包(bundle)信息」的消息将被隐藏。错误和警告仍然会显示。
lazy：当启用 lazy 时，dev-server 只有在请求时才编译包(bundle)。这意味着 webpack 不会监视任何文件改动。我们称之为“惰性模式”。
color：（CLI only） console中打印彩色日志
host： 指定一个host,默认是localhost。如果你希望服务器外部可以访问，指定如下：host: "0.0.0.0"。比如你用手机通过IP访问。
proxy： 代理。比如在 localhost:3000 上有后端服务的话，你可以这样启用代理：
    proxy: {
      "/api": "http://localhost:3000"
    }
progress（CLI only） 将编译进度输出到控制台。


8.babel

Babel 把用最新标准编写的 JavaScript 代码向下编译成可以在今天随处可用的版本。 这一过程叫做“源码到源码”编译， 也被称为转换编译。
"presets": 这个是babel6新加的，就是代表需要启动什么样的预设转码，在babel中，预设了6中，分别是 es2015  ,stage-0 , stage-1 ,stage-2 , stage-3 ,react
npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-0
a. babel文件配置
新建babel配置文件.babelrc，内容为

{
   "presets": [
     "es2015",
     "react",
     "stage-0"
   ],
   "plugins": []
 }

b.详细介绍
①babel-core 调用Babel的API进行转码
如果你需要以编程的方式来使用 Babel，可以使用 babel-core 这个包。babel-core 的作用是把 js 代码分析成 ast ，方便各个插件分析语法进行相应的处理。有些新语法在低版本 js 中是不存在的，如箭头函数，rest 参数，函数默认值等，这种语言层面的不兼容只能通过将代码转为 ast，分析其语法后再转为低版本 js。
首先安装 babel-core
②babel-loader babel-loader的主要作用是babel-core所需配置的一些初始化，以及编译结果的缓存
需要在webpack的配置文件中的添加babel-loader：

{
      test: /\.js$/,
      exclude: /(node_modules|bower_components)/,
      use: {
        loader: 'babel-loader',
        options: {
          presets: ['@babel/preset-env']
        }
      }
}

③ babel-preset-es2015 用于解析 ES6

④ babel-preset-react 用于解析 JSX

⑤ babel-preset-stage-0 用于解析 ES7 提案
检测：将index.js文件使用箭头函数编写

var fun = str => {
    document.getElementById('app').innerHTML = str;
}
fun('Babel设置成功')


9.babel-preset-state-0,babel-preset-state-1,babel-preset-state-2,babel-preset-state-3有什么区别？
每一级包含上一级的功能，比如 state-0包含state-1的功能，以此类推。state-0功能最全。


10. 请问webpack-dev-server与react-hot-loader两者的热替换有什么区别？
 区别在于webpack-dev-server自己的--hot模式只能即时刷新页面，但状态保存不住。因为React有一些自己语法(JSX)是HotModuleReplacementPlugin搞不定的。
而react-hot-loader在--hot基础上做了额外的处理，来保证状态可以存下来。


11. 容器组件: 容器组件就是使用 store.subscribe() 从 Redux state 树中读取部分数据，并通过 props 来把这些数据提供给要渲染的组件。你可以手工来开发容器组件，
但建议使用 React Redux 库的 connect() 方法来生成，这个方法做了性能优化来避免很多不必要的重复渲染。
